/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package forme;

import java.awt.Color;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.util.ArrayList;
import java.util.Properties;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javniApi.ApiUtakmice;
import komponente.tabela.model.ModelTabeleKlijenti;
import niti.NitLogger;
import niti.NitMail;
import niti.NitServer;
import provera.proveraUtakmica.ProveriUtakmice;
import serverSocket.Server;

/**
 *
 * @author KORISNIK
 */
public class JPanelServer extends javax.swing.JPanel {

    private ModelTabeleKlijenti model;
    private File file = new File("port.properties");
    private Properties configProperty;
    public static NitServer nitS;
    public static NitLogger nl;
    public static NitMail nm;
    Logger logger = Logger.getLogger("MyLog");

    /**
     * Creates new form JPanelServer
     */
    public JPanelServer(ModelTabeleKlijenti model) throws IOException {
        initComponents();
        this.model = model;

        if (Server.serverSocket == null) {
            srediPanelZaPokreni();

        } else {
            srediPanelZaZaustavi();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonPokreniServer = new javax.swing.JButton();
        jButtonZaustaviServer = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldStatus = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldPort = new javax.swing.JTextField();
        jButtonTestirajPort = new javax.swing.JButton();
        jButtonPromeniPort = new javax.swing.JButton();

        jButtonPokreniServer.setText("Pokreni server program");
        jButtonPokreniServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPokreniServerActionPerformed(evt);
            }
        });

        jButtonZaustaviServer.setText("Zaustavi server program");
        jButtonZaustaviServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonZaustaviServerActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Status server programa"));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Status servera:");

        jTextFieldStatus.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextFieldStatus.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldStatus.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jTextFieldStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Testiranje porta"));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel2.setText("Port:");

        jTextFieldPort.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jTextFieldPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldPortActionPerformed(evt);
            }
        });

        jButtonTestirajPort.setText("Testiraj port");
        jButtonTestirajPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTestirajPortActionPerformed(evt);
            }
        });

        jButtonPromeniPort.setText("Promeni port");
        jButtonPromeniPort.setEnabled(false);
        jButtonPromeniPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPromeniPortActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTextFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonPromeniPort, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                    .addComponent(jButtonTestirajPort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTestirajPort))
                .addContainerGap(49, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButtonPromeniPort))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 58, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jButtonPokreniServer, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonZaustaviServer, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPokreniServer)
                    .addComponent(jButtonZaustaviServer))
                .addGap(67, 67, 67))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonTestirajPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTestirajPortActionPerformed
        // TODO add your handling code here:
        String portString = jTextFieldPort.getText().trim();
        try {
            int port = Integer.parseInt(portString);
            ServerSocket serverSocker = new ServerSocket(port);
            serverSocker.close();
            JOptionPane.showMessageDialog(this, "Server se moze pokrenuti na tom portu!");
            jButtonPokreniServer.setEnabled(true);
            jButtonPromeniPort.setEnabled(true);
            jButtonPromeniPort.setVisible(true);

            jTextFieldPort.setEnabled(false);

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Port mora biti broj!");
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Server se ne moze pokrenuti na tom portu!");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Server se ne moze pokrenuti na tom portu!");
        }


    }//GEN-LAST:event_jButtonTestirajPortActionPerformed

    private void jButtonPromeniPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPromeniPortActionPerformed
        // TODO add your handling code here:
        jTextFieldPort.setEnabled(true);

        jButtonPokreniServer.setEnabled(false);
    }//GEN-LAST:event_jButtonPromeniPortActionPerformed

    private void jTextFieldPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldPortActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldPortActionPerformed

    private void jButtonPokreniServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPokreniServerActionPerformed
        // TODO add your handling code here:

        int odg = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da hocete da pokrenete server?");
        if (odg == 0) {
            String portString = jTextFieldPort.getText();
            try {
                int port = Integer.parseInt(portString);
                if (configProperty == null) {
                    ucitajPort();
                }
                configProperty.setProperty("port", portString);

                OutputStream outputStream;

                outputStream = new FileOutputStream(file);
                configProperty.store(outputStream, portString);
                outputStream.close();

                Properties prop = new Properties();

                InputStream input = new FileInputStream("port.properties");

                prop.load(input);

                int brojPortaUcitan = Integer.parseInt((String) prop.get("port"));

                if (Server.serverSocket != null) {
                    JOptionPane.showMessageDialog(null, "Server je vec pokrenut!");
                } else {
                    repozitorijum.Repozitorijum.klijenti = new ArrayList<>();
                    model.namestiListu(repozitorijum.Repozitorijum.klijenti);

                    ServerSocket serverSocket = new ServerSocket(brojPortaUcitan);
                    Server.serverSocket = serverSocket;

                    NitServer nitServer = new NitServer(serverSocket, model);
                    nitS = nitServer;
                    nitS.start();

                    JOptionPane.showMessageDialog(this, "Uspesno pokrenut server!");

                    pokreniNitLogger();
                    srediPanelZaZaustavi();
                    pokreniJavniApiUtakmice();
                    //Thread.sleep(30000);
                    pokreniProveruZaUtakmice();
                    pokreniNitMail();

                }

            } catch (Exception e) {
                e.printStackTrace();
            }

        }
    }//GEN-LAST:event_jButtonPokreniServerActionPerformed

    private void jButtonZaustaviServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonZaustaviServerActionPerformed
        // TODO add your handling code here:
        int odg = JOptionPane.showConfirmDialog(this, "Da li ste sigurni da hocete da zaustavite server program?");
        if (odg == 0) {

            if (Server.serverSocket != null) {

                try {
                    nitS.interrupt();

                    for (int i = 0; i < repozitorijum.Repozitorijum.klijenti.size(); i++) {

                        repozitorijum.Repozitorijum.klijenti.get(i).interrupt();
                        repozitorijum.Repozitorijum.klijenti.get(i).getVezaSaKlijentom().close();
                        repozitorijum.Repozitorijum.klijenti.remove(i);

                    }

                    repozitorijum.Repozitorijum.klijenti = null;

                    Server.serverSocket.close();

                    Server.serverSocket = null;

                    JOptionPane.showMessageDialog(this, "Uspesno ste zaustavili server program!");

                    srediPanelNakonZaustavi();
                    zatvoriHandlere();
                    zaustaviNitMail();
                    zaustaviNitLogger();
                    zaustaviApiUtakmice();
                    zaustaviProveruUtakmica();
                } catch (IOException ex) {
                    JOptionPane.showMessageDialog(this, "Doslo je do greske prilikom zaustavljanja server programa!");
                }

            } else {
                JOptionPane.showMessageDialog(this, "Server program nije pokrenut!");
            }

        }

    }//GEN-LAST:event_jButtonZaustaviServerActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonPokreniServer;
    private javax.swing.JButton jButtonPromeniPort;
    private javax.swing.JButton jButtonTestirajPort;
    private javax.swing.JButton jButtonZaustaviServer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextFieldPort;
    private javax.swing.JTextField jTextFieldStatus;
    // End of variables declaration//GEN-END:variables

    private void ucitajPort() throws FileNotFoundException, IOException {
        Properties dp = new Properties();

        dp.setProperty("port", "9000");

        configProperty = new Properties(dp);
    }

    private void srediPanelZaPokreni() throws IOException {
        jTextFieldStatus.setText("Server program nije pokrenut!");
        jTextFieldStatus.setBackground(Color.red);

        jButtonPromeniPort.setVisible(false);

        jButtonPokreniServer.setEnabled(false);
        jButtonZaustaviServer.setEnabled(false);

        ucitajPort();
        jTextFieldPort.setText(configProperty.getProperty("port"));
    }

    private void srediPanelZaZaustavi() {
        jTextFieldStatus.setText("Server program je pokrenut!");
        jTextFieldStatus.setBackground(Color.green);

        jTextFieldPort.setEnabled(false);

        jButtonPromeniPort.setEnabled(false);
        jButtonTestirajPort.setEnabled(false);
        jButtonPokreniServer.setEnabled(false);
        jButtonZaustaviServer.setEnabled(true);
    }

    private void pokreniJavniApiUtakmice() {

        javniApi.ApiUtakmice p = new ApiUtakmice();
        p.puniSvakih24h();
    }

    private void srediPanelNakonZaustavi() {
        jButtonZaustaviServer.setEnabled(false);
        jButtonPromeniPort.setEnabled(false);
        jButtonPromeniPort.setVisible(false);
        jButtonTestirajPort.setEnabled(true);

        jTextFieldStatus.setText("Server program nije pokrenut!");
        jTextFieldStatus.setBackground(Color.red);

        jTextFieldPort.setEnabled(true);
    }

    private void pokreniNitMail() {
        nm = new NitMail();
        nm.start();
    }

    private void pokreniNitLogger() {
        nl = new NitLogger();
        nl.start();
    }

    private void zatvoriHandlere() {
        for (Handler h : logger.getHandlers()) {
            h.close();
        }
    }

    private void pokreniProveruZaUtakmice() {
        ProveriUtakmice pu = new ProveriUtakmice();
        pu.proveriSvakih24h();
    }

    private void zaustaviNitMail() {
        if (nm != null) {
            nm.interrupt();
        }
    }

    private void zaustaviNitLogger() {
        if (nl != null) {
            nl.interrupt();
        }
    }

    private void zaustaviApiUtakmice() {
       
            ApiUtakmice.timer.cancel();
            ApiUtakmice.task.cancel();
            ApiUtakmice.timer.purge();
            
    }

    private void zaustaviProveruUtakmica() {
       
            ProveriUtakmice.timer.cancel();
            ProveriUtakmice.task.cancel();
            ProveriUtakmice.timer.purge();
            
        
    }
}
